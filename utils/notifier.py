import asyncio
import logging
from datetime import datetime, timedelta
from aiogram import Bot
from database.requests import get_tasks_with_users
from config import NOTIFICATION_HOUR, NOTIFICATION_MINUTE
import keyboards.user as kb

logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")


async def check_deadlines(bot: Bot):
    while True:
        now = datetime.now()
        logging.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏: %s", now.strftime("%H:%M:%S"))
        if now.hour == NOTIFICATION_HOUR and now.minute == NOTIFICATION_MINUTE:
            logging.info("–í—Ä–µ–º—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π!")
            await send_notifications(bot)
        await asyncio.sleep(60)

async def send_notifications(bot: Bot):
    now = datetime.now().date()
    logging.info("–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–¥–∞—á –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    
    task_list = await get_tasks_with_users()

    logging.info("–ù–∞–π–¥–µ–Ω–æ %d –∑–∞–¥–∞—á", len(task_list))

    for task, telegram_id in task_list:
        try:
            deadline = datetime.strptime(task.due_date, "%d.%m.%Y").date()
            text = get_notification_text(task.title, deadline, now)
            if text:
                logging.info("–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é %d: %s", telegram_id, text)
                await bot.send_message(chat_id=telegram_id, text=text, reply_markup=await kb.task_notif(task.id))
        except Exception as e:
            logging.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–¥–∞—á–∏ ID %d: %s", task.id, str(e))

def get_notification_text(title, deadline, now):
    if deadline == now + timedelta(days=3):
        return f"‚ö†Ô∏è –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ! –î–æ –¥–µ–¥–ª–∞–π–Ω–∞ –∑–∞–¥–∞—á–∏ '{title}' –æ—Å—Ç–∞–ª–æ—Å—å 3 –¥–Ω—è."
    elif deadline == now + timedelta(days=1):
        return f"‚è≥ –ó–∞–≤—Ç—Ä–∞ –¥–µ–¥–ª–∞–π–Ω –∑–∞–¥–∞—á–∏ '{title}'!"
    elif deadline == now:
        return f"üö® –°–µ–≥–æ–¥–Ω—è –¥–µ–¥–ª–∞–π–Ω –∑–∞–¥–∞—á–∏ '{title}'! –ü–æ—Ä–∞ —Å–¥–∞–≤–∞—Ç—å!"
    return None

async def start_notifier(bot: Bot):
    logging.info("–ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...")
    asyncio.create_task(check_deadlines(bot))
